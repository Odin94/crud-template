/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as App_shellRouteImport } from './routes/_app_shell'
import { Route as App_shellIndexRouteImport } from './routes/_app_shell/index'
import { Route as App_shellAnalyticsRouteImport } from './routes/_app_shell/analytics'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const App_shellRoute = App_shellRouteImport.update({
  id: '/_app_shell',
  getParentRoute: () => rootRouteImport,
} as any)
const App_shellIndexRoute = App_shellIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => App_shellRoute,
} as any)
const App_shellAnalyticsRoute = App_shellAnalyticsRouteImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => App_shellRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/analytics': typeof App_shellAnalyticsRoute
  '/': typeof App_shellIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/analytics': typeof App_shellAnalyticsRoute
  '/': typeof App_shellIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app_shell': typeof App_shellRouteWithChildren
  '/login': typeof LoginRoute
  '/_app_shell/analytics': typeof App_shellAnalyticsRoute
  '/_app_shell/': typeof App_shellIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/analytics' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/analytics' | '/'
  id:
    | '__root__'
    | '/_app_shell'
    | '/login'
    | '/_app_shell/analytics'
    | '/_app_shell/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  App_shellRoute: typeof App_shellRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app_shell': {
      id: '/_app_shell'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof App_shellRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app_shell/': {
      id: '/_app_shell/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof App_shellIndexRouteImport
      parentRoute: typeof App_shellRoute
    }
    '/_app_shell/analytics': {
      id: '/_app_shell/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof App_shellAnalyticsRouteImport
      parentRoute: typeof App_shellRoute
    }
  }
}

interface App_shellRouteChildren {
  App_shellAnalyticsRoute: typeof App_shellAnalyticsRoute
  App_shellIndexRoute: typeof App_shellIndexRoute
}

const App_shellRouteChildren: App_shellRouteChildren = {
  App_shellAnalyticsRoute: App_shellAnalyticsRoute,
  App_shellIndexRoute: App_shellIndexRoute,
}

const App_shellRouteWithChildren = App_shellRoute._addFileChildren(
  App_shellRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  App_shellRoute: App_shellRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
